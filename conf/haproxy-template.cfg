# Global settings
global
    pidfile /opt/haproxy/run/haproxy.pid
    user haproxy
    group haproxy
    # turn on stats unix socket
    stats socket /opt/haproxy/run/haproxy.sock level admin expose-fd listeners

    #### Max Connection ####
    # If this value is not set, it will automatically be calculated based on the current file
    # descriptors limit reported by the "ulimit -n" command, possibly reduced to a lower value if a memory limit is enforced,
    # based on the buffer size, memory allocated to compression, SSL cache size, and use or not of SSL and the associated maxsslconn (which can also be automatic).
    maxconn 400000

    ### CPU Pinning ####
    # https://www.haproxy.com/blog/multithreading-in-haproxy/
    # Multi-thread mode
    nbthread 1

    # Multi-process mode
    #cpu-map 1 0
    #cpu-map 2 1
    #cpu-map 3 2
    #cpu-map 4 3

    #### Tuning ####
    # Status
    stats timeout 2m

    # Buffer Size
    # HAProxy Layer 4 Tuning for 400,000 Concurrent Connections and a 4GiB Memory Limit.
    # tune.maxaccept: The maximum number of new connections to accept in a single poll() loop.
    # Setting this to a large value like 400,000 helps handle sudden traffic spikes efficiently by accepting a large number of connections at once.
    tune.maxaccept 400000

    # tune.maxrewrite: Sets the maximum size of the buffer used for rewriting HTTP headers.
    # This value is generally less critical in TCP mode (Layer 4) but is left at a standard value.
    tune.maxrewrite 32768
    
    # tune.bufsize: Crucial for managing memory.
    # It sets the size of the buffer allocated per connection for data transfer.
    # To handle 400,000 connections within a 4GiB memory limit, each connection's buffer must be extremely small.
    # 4GiB / 400,000 connections ≈ 10.24 KiB per connection.
    # We set it to 8 KiB to provide a safe margin for other memory overhead.
    # The previous value (128 KiB) would have required ~50 GiB of RAM.
    tune.bufsize 8192

    # tune.recv_enough: Sets the minimum amount of data to read from a TCP socket
    # before HAProxy considers it "enough" to proceed.
    # This helps reduce system calls and improves efficiency.
    # 8 KiB is a good balance for general workloads.
    tune.recv_enough 8192

    # tune.sndbuf.client: Requests the OS to set the TCP send buffer size for client-side sockets.
    # A smaller buffer conserves memory per connection.
    # We reduce it from 256 KiB to a more reasonable 64 KiB to stay within the memory limit for a large number of connections.
    tune.sndbuf.client 65536

    # tune.sndbuf.server: Similar to tune.sndbuf.client, but for server-side sockets.
    # It should be consistent with the client-side buffer for balanced data flow.
    tune.sndbuf.server 65536

    # tune.idletimer: The timeout for idle TCP connections.
    # After this period of inactivity, the connection will be closed.
    # 60 seconds is a standard value.
    tune.idletimer 60s

    # tune.pipesize: Sets the size of the internal pipe buffer used for data transfer in TCP mode.
    # This value should be consistent with `tune.bufsize` to avoid memory waste and ensure efficient data streaming.
    # The previous value (1 MiB) would have led to massive memory consumption.
    tune.pipesize 8192

    # Enable Zero Copy Forward
    # https://docs.haproxy.org/dev/configuration.html#tune.pt.zero-copy-forwarding
    tune.pt.zero-copy-forwarding on

# Defaults
defaults
    mode tcp
    log global
    option dontlognull
    option log-health-checks
    option redispatch
    option nolinger
    option tcpka
    retries 3
    timeout queue 86400s
    timeout connect 86400s
    timeout client 86400s
    timeout server 86400s

#### HAProxy Status ####
listen stats
    #bind {{ MULTUS_IP }}:1936
    bind *:1936
    mode http
    no log
    stats enable
    stats refresh 1s
    # Health check monitoring uri.
    monitor-uri /healthz

    # Add your custom health check monitoring failure condition here.
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /

#### HAProxy Prometheus Exporter ####
frontend prometheus-exporter
    bind :9121
    mode http
    http-request use-service prometheus-exporter if { path /metrics }
    no log

#### Redis Replication Cluster-0 (Master) ####
frontend frontend-redis-master-replication-cluster-0
    #bind {{ MULTUS_IP }}:6379
    bind *:6379 tfo
    default_backend backend-redis-master-replication-cluster-0
    mode tcp

    # Enable Splice
    #option splice-auto
    option splice-request
    option splice-response

    # Disable Logs
    # OpenShift OVN-Kubernetes: ServiceIP CIDR / ClusterIP CIDR / GENEVE CIDR / Load Balancer Gateway VIP(Health Check)
    acl skip_log src 172.30.0.0/16 10.128.0.0/14 100.64.0.0/16 192.168.10.11/32

    # Disable logging if any of the above CIDRs match.
    tcp-request content reject if skip_log

backend backend-redis-master-replication-cluster-0
    # TCP Mode
    mode tcp

    # Enable Splice
    #option splice-auto
    option splice-request
    option splice-response

    # Enable retry mechanism for all retryable errors.
    # This directive ensures that if a connection to a backend server fails
    # due to any common and recoverable reason — such as a timeout, TCP reset,
    # no response, or other transient network/server issues — HAProxy will attempt
    # to retry the request to another backend server (up to the number defined by 'retries').
        
    # Especially useful when using TCP Fast Open (TFO), where data is sent with the initial SYN.
    # If TFO fails or the server doesn't support it (e.g., TFO cookie missing), the initial
    # request could fail silently. This retry mechanism helps recover from such failures
    # without affecting client experience.
        
    # Common retryable errors include:
    # - connection-failure
    # - connection-timeout
    # - empty-response
    # - response-timeout
    # - refused-stream (HTTP/2)
    # - maintenance
    # - HTTP 500/502/503/504 (for HTTP mode)
    retry-on all-retryable-errors

    # LoadBalancing Type
    balance source
    hash-type consistent

    # Options
    option tcp-check
    #tcp-check send "AUTH {{ REDIS_PASSWORD }}"\r\n
    tcp-check send {{ AUTH_HEX }}
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    #tcp-check send info\ replication\r\n
    #tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK

    # Redis Replication Pods
    server redis-master-replication-pod-00 172.16.1.11:6379 tfo check inter 2s rise 1 fall 2 maxconn 400000
    server redis-master-replication-pod-01 172.16.1.12:6379 tfo check inter 2s rise 1 fall 2 maxconn 400000
    server redis-master-replication-pod-02 172.16.1.13:6379 tfo check inter 2s rise 1 fall 2 maxconn 400000
